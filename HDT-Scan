import subprocess

def nmap_scan(target, ports):
    try:
        # Executa o comando nmap
        result = subprocess.run(['nmap', '-sV', '-p', ports, target], capture_output=True, text=True)
        # Exibe a saida do comando
        print("Saida do Nmap")
        print(result.stdout)
    except FileNotFoundError:
        print("Nmap nao encontrado. Por favor, instale o Nmap no seu sistema.")

def rustscan(target):
    try:
        # Executa o comando rustscan
        process = subprocess.Popen(['rustscan', '-b', '2000', '-a', target, '-u' '1900'], stdout=subprocess.PIPE, text=True)
        # Exibe a saida em tempo real enquanto o processo esta em execucao
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
        
        # Espera o processo terminar e pega o codigo de retorno
        process.wait()
    except FileNotFoundError:
        print("Rustscan nao encontrado. Por favor, instale o Rustscan no seu sistema.")

def gobuster(target, port):
    try:
        # Executa o comando gobuster
        proc = subprocess.Popen(['gobuster', 'dir', '-u', f'http://{target}:{port}', '-w' '/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt'], stdout=subprocess.PIPE, text=True)
        # Exibe a saida em tempo real enquanto o processo esta em execucao
        while True:
            output = proc.stdout.readline()
            if output == '' and proc.poll() is not None:
                break
            if output:
                print(output.strip())
        
        # Espera o processo terminar e pega o codigo de retorno
        proc.wait()
    except FileNotFoundError:
        print("gobuster nao encontrado. Por favor, instale o gobuster no seu sistema.")

def main():
    print("HDT Scan!")
    target = input("Target IP: ")
    rustscan(target)
    ports = input("Ports: ")
    nmap_scan(target, ports)
    port = input("Web Port: ")
    gobuster(target, port)

if __name__ == "__main__":
    main()